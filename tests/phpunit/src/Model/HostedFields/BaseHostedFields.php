<?php

namespace Payplug\PayplugWoocommerce\Tests\phpunit\src\Model\HostedFields;

use Payplug\PayplugWoocommerce\Model\HostedFields;
use PHPUnit\Framework\TestCase;
use WC_Order;

class BaseHostedFields extends TestCase {

	protected $hostedFields;

	protected $mockedOrder;

	public function setUp(): void {

		$this->hostedFields = $this->getMockBuilder(HostedFields::class)
			->setConstructorArgs(['secret', 'api_key', 'identifier', 'api_key_secret'])
            ->onlyMethods(['get_api_key_secret', 'get_api_version', 'get_api_key', 'buildHashContent', 'limit_length'])
            ->getMock();
		$this->mockedOrder = $this->populateMockedOrder();

		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function populateMockedOrder() {
		$order = $this->createMock(WC_Order::class);
		$order->method('get_billing_address_1')->willReturn('123 Main St');
		$order->method('get_billing_address_2')->willReturn('Apt 4B');
		$order->method('get_billing_country')->willReturn('US');
		$order->method('get_billing_phone')->willReturn('1234567890');
		$order->method('get_billing_postcode')->willReturn('10001');
		$order->method('get_shipping_address_1')->willReturn('456 Elm St');
		$order->method('get_shipping_address_2')->willReturn('');
		$order->method('get_shipping_country')->willReturn('CA');
		$order->method('get_shipping_phone')->willReturn('');
		$order->method('get_shipping_postcode')->willReturn('A1B2C3');
		return $order;
	}

}
