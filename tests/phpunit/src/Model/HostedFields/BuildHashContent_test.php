<?php

namespace Payplug\PayplugWoocommerce\Tests\phpunit\src\Model\HostedFields;

class BuildHashContent_test extends BaseHostedFields {


	public function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return string
	 */
	public function getHashContent() {
		return 'hash_content';
	}

	/**
	 * @return string
	 */
	public function getHash() {
		return 'hash';
	}

	public function testBuildHashContentWithValidParams()
	{
		$params = [
			'param1' => 'value1',
			'param2' => 'value2',
		];

		$this->hostedFields->method('get_api_key_secret')->willReturn('secret_key');

		$result = $this->hostedFields->buildHashContent($params);

		$expectedString = 'secret_keyparam1=value1secret_keyparam2=value2secret_key';
		$expectedHash = hash('sha256', $expectedString);

		$this->assertEquals($expectedHash, $result);
	}


	public function testBuildHashContentThrowsExceptionForEmptyParams(){
		$this->expectException(\InvalidArgumentException::class);
		$this->expectExceptionMessage('Parameters array cannot be empty');
		$this->hostedFields->buildHashContent([]);
	}

	public function testBuildHashContentThrowsExceptionForNonArrayParams()
	{
		$this->expectException(\InvalidArgumentException::class);
		$this->expectExceptionMessage('Parameters array cannot be empty');
		$this->hostedFields->buildHashContent('invalid');
	}

	public function testBuildHashContentThrowsExceptionForEmptySecretKey()
	{
		$this->hostedFields->method('get_api_key_secret')->willReturn('');
		$this->expectException(\InvalidArgumentException::class);
		$this->expectExceptionMessage('Secret key cannot be empty');
		$this->hostedFields->buildHashContent(['param1' => 'value1']);
	}

}
