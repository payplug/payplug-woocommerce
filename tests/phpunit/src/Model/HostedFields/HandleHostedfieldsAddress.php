<?php

namespace Payplug\PayplugWoocommerce\Model;

use Payplug\PayplugWoocommerce\Tests\phpunit\src\Model\HostedFields\BaseHostedFields;
use WC_Order;

class BuildHashContent_test extends BaseHostedFields {

	public function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->hostedFields = new HostedFields('api_secret', 'api_key', 'identifier', 'api_key_secret');
	}

	public function testHandleHostedfieldAddressWithBilling()
	{
		$data = [];
		$this->hostedFields->handle_hostedfield_address($data, $this->mockedOrder, 'billing');
		$this->assertEquals('123 Main St Apt 4B', $data['BILLINGADDRESS']);
		$this->assertEquals('US', $data['BILLINGCOUNTRY']);
		$this->assertEquals('1234567890', $data['BILLINGPHONE']);
		$this->assertEquals('10001', $data['BILLINGPOSTALCODE']);
	}

	public function testHandleHostedfieldAddressWithShipping()
	{
		$data = [];
		$this->hostedFields->handle_hostedfield_address($data, $this->mockedOrder, 'shipping');
		$this->assertEquals('456 Elm St ', $data['SHIPPINGADDRESS']);
		$this->assertEquals('CA', $data['SHIPPINGCOUNTRY']);
		$this->assertEquals('1234567890', $data['SHIPPINGPHONE']); // Fallback to billing phone
		$this->assertEquals('A1B2C3', $data['SHIPPINGPOSTALCODE']);
	}

	public function testHandleHostedfieldAddressWithMissingFields()
	{
		$data = [];
		$order = $this->createMock(WC_Order::class);
		$order->method('get_billing_address_1')->willReturn('');
		$order->method('get_billing_address_2')->willReturn('');
		$order->method('get_billing_country')->willReturn('');
		$order->method('get_billing_phone')->willReturn('');
		$order->method('get_billing_postcode')->willReturn('');

		$this->hostedFields->handle_hostedfield_address($data, $order, 'billing');
		$this->assertEquals(' ', $data['BILLINGADDRESS']);
		$this->assertEquals('', $data['BILLINGCOUNTRY']);
		$this->assertEquals('', $data['BILLINGPHONE']);
		$this->assertEquals('', $data['BILLINGPOSTALCODE']);
	}

}
